from pprint import pprint

def parse(line):
    list_map = {}
    parsed_list = []
    opened_list = 0
    for char in line:
        if char == "[":
            opened_list += 1 
            list_map[opened_list] = []
        if char == "]":
            if opened_list > 1:
                list_map[opened_list-1].append(list_map.pop(opened_list))
                opened_list -= 1
            elif opened_list == 1:
                parsed_list.append(list_map.pop(opened_list))
                opened_list -= 1
        if char.isnumeric():
            if opened_list > 0:
               list_map[opened_list] = list_map.get(opened_list, [])
               list_map[opened_list].append(char)
            else:
                parsed_list.append(char)
    return parsed_list
 
def compare_pair(pair: []):
    pair1 = pair[0]
    pair2 = pair[1]
    print('==================')
    print('pairs')
    print(pair[0])
    print(pair[1])
    # print(len(pair[0]))
    # print(len(pair[1]))
    # print()

    # if len(pair1) > len(pair2):
    #     return False

    for i in range(len(pair1)):
        print(i)
        if i == len(pair2):
            return False

        print(f'ele1: {pair1[i]}')
        print(f'ele2: {pair2[i]}')

        if isinstance(pair1[i], list) and isinstance(pair2[i], list):
            # print(f'len1: {len(pair1[i])}')
            # print(f'len2: {len(pair2[i])}')
            print("here")
            # if len(pair2[i]) < len(pair1[i]):
            #     return False
            for j in range(len(pair1[i])): 
                print("here3")
                if len(pair1[i]) == 0 and len(pair2[i]) !=0:
                    print('here1')
                    return True
                if len(pair2[i]) == 0 and len(pair1[i]) !=0:
                    print('here2')
                    return False
                # print(j)
                # print(pair1[i])
                # print(pair2[i])
                if j == len(pair2[i]):
                    print('here3')
                    return False
                new_list = [pair1[i][j], pair2[i][j]]
                if not compare_pair(new_list):
                    print('here2')
                    return False
                # if pair2[i][j] < pair1[i][j]:
                #     return False
        elif isinstance(pair1[i], list):
            # if isinstance(pair1[i][0], list):
            #     return False
            part2_list = [pair2[i]]
            # if len(pair1[i]) > 1:
            #     return False
            if len(pair1[i]) == 0:
                continue
            if not compare_pair([pair1[i], part2_list]):
                return False
            # if pair2[i] < pair1[i][0]:
            #     return False
        elif isinstance(pair2[i], list):
            # if isinstance(pair2[i][0], list):
            #     return False
            # part 2 can be [[1,3]], [], [[]]
            part1_list = [pair1[i]]
            if len(pair2[i]) == 0 and len(part1_list) != 0:
                return False
            if not compare_pair([part1_list, pair2[i]]):
                return False
            
            # if len(pair2[i]) > 1:
            #     return False
            # else:
            #     if pair2[i][0] > pair1[i]:
            #         return False
        elif pair1[i].isnumeric() and pair2[i].isnumeric():
            if pair2[i] < pair1[i]:
                return False
            if pair2[i] > pair1[i]:
                return True

    return True

def compare_pair2(pair: []):
    pair1 = pair[0]
    pair2 = pair[1]
    print('==================')
    print(f'pair1:{pair1}')
    print(f'pair2:{pair2}')
    print(f'pair1 len:{len(pair1)}')
    print(f'pair2 len:{len(pair2)}')
    print()

    # if len(pair1) > len(pair2):
    #     return False

    for i in range(len(pair1)):
        print(f'Pair Index: {i}')
        if i == len(pair2):
            return False

        print(f'ele1: {pair1[i]}')
        print(f'ele2: {pair2[i]}')

        if isinstance(pair1[i], list) and isinstance(pair2[i], list):
            print("Both elements are lists")



            for j in range(len(pair1[i])): 
                print("here3")
                if len(pair1[i]) == 0 and len(pair2[i]) !=0:
                    print('here1')
                    return True
                if len(pair2[i]) == 0 and len(pair1[i]) !=0:
                    print('here2')
                    return False
                if j == len(pair2[i]):
                    print('here3')
                    return False
                new_list = [pair1[i][j], pair2[i][j]]
                if not compare_pair(new_list):
                    print('here4')
                    return False
        elif isinstance(pair1[i], list):
            print("Pair 1 = List, Pair 2 = Num") 



            part2_list = [pair2[i]]
            if len(pair1[i]) == 0:
                continue
            if not compare_pair([pair1[i], part2_list]):
                return False
        elif isinstance(pair2[i], list):
            print("Pair 1 = Num, Pair 2 = List") 


            part1_list = [pair1[i]]
            if len(pair2[i]) == 0 and len(part1_list) != 0:
                return False
            if not compare_pair([part1_list, pair2[i]]):
                return False
            
        elif pair1[i].isnumeric() and pair2[i].isnumeric():
            print("Both are Nums")
            if pair2[i] < pair1[i]:
                return False
            if pair2[i] > pair1[i]:
                return True

    return True

def prob1(): 
    with open('d13_in_test.txt','r') as file:
        pair_list = []
        for pair in file.read().split('\n\n'):
            pair_list_2 = [x for x in pair.split('\n') if x != '']
            pair_list.append(pair_list_2)

        correct_indicies = []
        for index, pairs in enumerate(pair_list):
            parsed_pairs = []
            for pair in pairs:
                parsed_pairs.append(parse(pair[1:-1]))
            if compare_pair(parsed_pairs):
                correct_indicies.append(index + 1)
                print(f'Index: {index}')

        print(correct_indicies)
        print(sum(correct_indicies))
             

def prob2():
    with open('d13_in_test.txt','r') as file:
        pass

prob1()
# prob2()
            

